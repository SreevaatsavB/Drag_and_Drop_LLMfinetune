{"ast":null,"code":"var _jsxFileName = \"/Users/sreevaatsav/Downloads/UI copy 4/my-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport CustomNode from \"./components/CustomNode\";\nimport Popup from \"./components/Popup\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [];\nconst initialEdges = [];\nconst nodeTypes = {\n  customNode: CustomNode\n};\nfunction FlowComponent() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nextNodeId, setNextNodeId] = useState(3);\n  const [nodeType, setNodeType] = useState(\"\");\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [popupValue, setPopupValue] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(null);\n  const pollNodeStatus = useCallback(() => {\n    fetch('http://localhost:5000/status').then(response => response.json()).then(statuses => {\n      setNodes(nds => nds.map(node => {\n        const status = statuses[node.id];\n        if (status === 'completed') {\n          return {\n            ...node,\n            style: {\n              ...node.style,\n              backgroundColor: 'green'\n            }\n          };\n        }\n        return node;\n      }));\n    }).catch(error => console.error('Error fetching node statuses:', error));\n  }, [setNodes]);\n  useEffect(() => {\n    const interval = setInterval(pollNodeStatus, 1000);\n    return () => clearInterval(interval);\n  }, [pollNodeStatus]);\n  const onConnect = useCallback(params => setEdges(els => addEdge(params, els)), [setEdges]);\n  const isValidConnection = connection => {\n    const sourceNode = nodes.find(node => node.id === connection.source);\n    const targetNode = nodes.find(node => node.id === connection.target);\n    if (!sourceNode || !targetNode) return false;\n    const sourceType = sourceNode.data.label.split(\" \")[0];\n    const targetType = targetNode.data.label.split(\" \")[0];\n    if (sourceType === \"Dataset\" && (targetType === \"Preprocess\" || targetType === \"Train\")) {\n      return true;\n    }\n    if (sourceType === \"Preprocess\" && targetType === \"Train\") {\n      return true;\n    }\n    if (sourceType === \"Train\" && targetType === \"Test\") {\n      return true;\n    }\n    if (sourceType === \"Test\" && targetType === \"Deploy\") {\n      return true;\n    }\n    return false;\n  };\n  const addNode = useCallback(() => {\n    if (!nodeType) return;\n    let newNode;\n    const commonCallbacks = {\n      onDropdownChange: () => {},\n      onNumberChange: (value, field) => {\n        setNodes(nds => nds.map(node => node.id === String(nextNodeId) ? {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        } : node));\n      },\n      onStringChange: (value, field) => {\n        setNodes(nds => nds.map(node => node.id === String(nextNodeId) ? {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        } : node));\n      },\n      onFileChange: () => {}\n    };\n    switch (nodeType) {\n      case \"Dataset\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            url: \"\",\n            cred: \"\",\n            onCredChange: () => {\n              setSelectedNode(String(nextNodeId));\n              setIsPopupOpen(true);\n            },\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Upload Dataset\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            file: \"\",\n            ...commonCallbacks,\n            onFileChange: file => {\n              setNodes(nds => nds.map(node => node.id === String(nextNodeId) ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  file\n                }\n              } : node));\n            }\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Preprocess\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            prompt: \"\",\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Train\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            temperature: \"\",\n            cred: \"\",\n            onCredChange: () => {\n              setSelectedNode(String(nextNodeId));\n              setIsPopupOpen(true);\n            },\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Test\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            input: \"\",\n            output: \"\",\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Deploy\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            typeValue: \"\",\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      default:\n        break;\n    }\n    if (newNode) {\n      setNodes(nds => nds.concat(newNode));\n      setNextNodeId(nextNodeId + 1);\n      setNodeType(\"\");\n    }\n  }, [nodeType, nextNodeId, setNodes]);\n  const handlePopupSubmit = value => {\n    setNodes(nds => nds.map(node => node.id === selectedNode ? {\n      ...node,\n      data: {\n        ...node.data,\n        cred: value\n      }\n    } : node));\n    setIsPopupOpen(false);\n    setPopupValue(\"\");\n  };\n  const executeAction = useCallback(() => {\n    fetch('http://localhost:5000/execute', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nodes,\n        edges\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.status === 'success') {\n        alert('Flow is valid!');\n      } else {\n        alert(`Error: ${data.message}`);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, [nodes, edges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      isValidConnection: isValidConnection,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      style: {\n        flexGrow: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        right: \"10px\",\n        top: \"10px\",\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: nodeType,\n        onChange: e => setNodeType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Node Type...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Dataset\",\n          children: \"Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Upload Dataset\",\n          children: \"Upload Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Preprocess\",\n          children: \"Preprocess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Train\",\n          children: \"Train\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Test\",\n          children: \"Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Deploy\",\n          children: \"Deploy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: executeAction,\n        children: \"Execute Action\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(Popup, {\n      value: popupValue,\n      onChange: setPopupValue,\n      onSubmit: handlePopupSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowComponent, \"vctkF5ryRrNW7uHtUTpl6qqxtL8=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = FlowComponent;\nexport default FlowComponent;\nvar _c;\n$RefreshReg$(_c, \"FlowComponent\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","CustomNode","Popup","jsxDEV","_jsxDEV","initialNodes","initialEdges","nodeTypes","customNode","FlowComponent","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nextNodeId","setNextNodeId","nodeType","setNodeType","isPopupOpen","setIsPopupOpen","popupValue","setPopupValue","selectedNode","setSelectedNode","pollNodeStatus","fetch","then","response","json","statuses","nds","map","node","status","id","style","backgroundColor","catch","error","console","interval","setInterval","clearInterval","onConnect","params","els","isValidConnection","connection","sourceNode","find","source","targetNode","target","sourceType","data","label","split","targetType","addNode","newNode","commonCallbacks","onDropdownChange","onNumberChange","value","field","String","onStringChange","onFileChange","type","url","cred","onCredChange","position","x","y","file","prompt","temperature","input","output","typeValue","concat","handlePopupSubmit","executeAction","method","headers","body","JSON","stringify","alert","message","height","display","flexDirection","children","fitView","flexGrow","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","right","top","zIndex","onChange","e","onClick","onSubmit","_c","$RefreshReg$"],"sources":["/Users/sreevaatsav/Downloads/UI copy 4/my-app/src/App.js"],"sourcesContent":["import React, { useCallback, useState, useEffect } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport CustomNode from \"./components/CustomNode\";\nimport Popup from \"./components/Popup\";\nimport './App.css';\n\nconst initialNodes = [];\nconst initialEdges = [];\n\nconst nodeTypes = {\n  customNode: CustomNode,\n};\n\nfunction FlowComponent() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nextNodeId, setNextNodeId] = useState(3);\n  const [nodeType, setNodeType] = useState(\"\");\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [popupValue, setPopupValue] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  const pollNodeStatus = useCallback(() => {\n    fetch('http://localhost:5000/status')\n      .then(response => response.json())\n      .then(statuses => {\n        setNodes(nds => nds.map(node => {\n          const status = statuses[node.id];\n          if (status === 'completed') {\n            return { ...node, style: { ...node.style, backgroundColor: 'green' } };\n          }\n          return node;\n        }));\n      })\n      .catch(error => console.error('Error fetching node statuses:', error));\n  }, [setNodes]);\n\n  useEffect(() => {\n    const interval = setInterval(pollNodeStatus, 1000);\n    return () => clearInterval(interval);\n  }, [pollNodeStatus]);\n\n  const onConnect = useCallback(\n    (params) => setEdges((els) => addEdge(params, els)),\n    [setEdges]\n  );\n\n  const isValidConnection = (connection) => {\n    const sourceNode = nodes.find(node => node.id === connection.source);\n    const targetNode = nodes.find(node => node.id === connection.target);\n    if (!sourceNode || !targetNode) return false;\n\n    const sourceType = sourceNode.data.label.split(\" \")[0];\n    const targetType = targetNode.data.label.split(\" \")[0];\n\n    if (sourceType === \"Dataset\" && (targetType === \"Preprocess\" || targetType === \"Train\")) {\n      return true;\n    }\n    if (sourceType === \"Preprocess\" && targetType === \"Train\") {\n      return true;\n    }\n    if (sourceType === \"Train\" && targetType === \"Test\") {\n      return true;\n    }\n    if (sourceType === \"Test\" && targetType === \"Deploy\") {\n      return true;\n    }\n    return false;\n  };\n\n  const addNode = useCallback(() => {\n    if (!nodeType) return;\n    let newNode;\n    const commonCallbacks = {\n      onDropdownChange: () => {},\n      onNumberChange: (value, field) => {\n        setNodes((nds) =>\n          nds.map((node) =>\n            node.id === String(nextNodeId)\n              ? { ...node, data: { ...node.data, [field]: value } }\n              : node\n          )\n        );\n      },\n      onStringChange: (value, field) => {\n        setNodes((nds) =>\n          nds.map((node) =>\n            node.id === String(nextNodeId)\n              ? { ...node, data: { ...node.data, [field]: value } }\n              : node\n          )\n        );\n      },\n      onFileChange: () => {},\n    };\n    switch (nodeType) {\n      case \"Dataset\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            url: \"\",\n            cred: \"\",\n            onCredChange: () => {\n              setSelectedNode(String(nextNodeId));\n              setIsPopupOpen(true);\n            },\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Upload Dataset\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            file: \"\",\n            ...commonCallbacks,\n            onFileChange: (file) => {\n              setNodes((nds) =>\n                nds.map((node) =>\n                  node.id === String(nextNodeId)\n                    ? { ...node, data: { ...node.data, file } }\n                    : node\n                )\n              );\n            },\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Preprocess\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            prompt: \"\",\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Train\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            temperature: \"\",\n            cred: \"\",\n            onCredChange: () => {\n              setSelectedNode(String(nextNodeId));\n              setIsPopupOpen(true);\n            },\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Test\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            input: \"\",\n            output: \"\",\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Deploy\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            typeValue: \"\",\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      default:\n        break;\n    }\n\n    if (newNode) {\n      setNodes((nds) => nds.concat(newNode));\n      setNextNodeId(nextNodeId + 1);\n      setNodeType(\"\");\n    }\n  }, [nodeType, nextNodeId, setNodes]);\n\n  const handlePopupSubmit = (value) => {\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNode\n          ? { ...node, data: { ...node.data, cred: value } }\n          : node\n      )\n    );\n    setIsPopupOpen(false);\n    setPopupValue(\"\");\n  };\n\n  const executeAction = useCallback(() => {\n    fetch('http://localhost:5000/execute', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ nodes, edges }),\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status === 'success') {\n          alert('Flow is valid!');\n        } else {\n          alert(`Error: ${data.message}`);\n        }\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  }, [nodes, edges]);\n\n  return (\n    <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        isValidConnection={isValidConnection}\n        nodeTypes={nodeTypes}\n        fitView\n        style={{ flexGrow: 1 }}\n      >\n        <MiniMap />\n        <Controls />\n        <Background color=\"#aaa\" gap={16} />\n      </ReactFlow>\n      <div\n        style={{\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\",\n          zIndex: 1000,\n        }}\n      >\n        <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n          <option value=\"\">Select Node Type...</option>\n          <option value=\"Dataset\">Dataset</option>\n          <option value=\"Upload Dataset\">Upload Dataset</option>\n          <option value=\"Preprocess\">Preprocess</option>\n          <option value=\"Train\">Train</option>\n          <option value=\"Test\">Test</option>\n          <option value=\"Deploy\">Deploy</option>\n        </select>\n        <button onClick={addNode}>Add Node</button>\n        <button onClick={executeAction}>Execute Action</button>\n      </div>\n      {isPopupOpen && (\n        <Popup value={popupValue} onChange={setPopupValue} onSubmit={handlePopupSubmit} />\n      )}\n    </div>\n  );\n}\n\nexport default FlowComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}