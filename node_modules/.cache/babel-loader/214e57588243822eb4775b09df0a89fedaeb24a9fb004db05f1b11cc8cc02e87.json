{"ast":null,"code":"var _jsxFileName = \"/Users/sreevaatsav/Downloads/UI/my-app/src/App.js\",\n  _s = $RefreshSig$();\n// // import React, { useCallback, useState } from \"react\";\n// // import ReactFlow, {\n// //   MiniMap,\n// //   Controls,\n// //   Background,\n// //   useNodesState,\n// //   useEdgesState,\n// //   addEdge,\n// // } from \"reactflow\";\n// // import \"reactflow/dist/style.css\";\n// // import CustomNode from \"./CustomNode\";\n\n// // const initialNodes = [];\n// // const initialEdges = [];\n\n// // const nodeTypes = {\n// //   customNode: CustomNode,\n// // };\n\n// // function FlowComponent() {\n// //   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n// //   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n// //   const [nextNodeId, setNextNodeId] = useState(3);\n// //   const [nodeType, setNodeType] = useState(\"\");\n// //   const [selectedNode, setSelectedNode] = useState(null);\n// //   const [submittedData, setSubmittedData] = useState(null);\n// //   const [number1, setNumber1] = useState(null);\n// //   const [number2, setNumber2] = useState(null);\n// //   const [result, setResult] = useState(null);\n\n// //   const onConnect = useCallback(\n// //     (params) => setEdges((els) => addEdge(params, els)),\n// //     [setEdges]\n// //   );\n\n// //   const onNodeClick = useCallback((event, node) => {\n// //     setSelectedNode(node);\n// //   }, []);\n\n// //   const executeAction = useCallback(() => {\n// //     if (number1 !== null && number2 !== null) {\n// //       const sum = parseFloat(number1) + parseFloat(number2);\n// //       setResult(sum);\n// //     }\n// //   }, [number1, number2]);\n\n// //   const addNode = useCallback(() => {\n// //     if (!nodeType) return;\n// //     const newNode = {\n// //       id: String(nextNodeId),\n// //       type: \"customNode\",\n// //       data: {\n// //         label: `${nodeType} Node ${nextNodeId}`,\n// //         value: \"\",\n// //         onChange: (value) => {\n// //           setNodes((nds) =>\n// //             nds.map((node) =>\n// //               node.id === String(nextNodeId)\n// //                 ? { ...node, data: { ...node.data, value: value } }\n// //                 : node\n// //             )\n// //           );\n// //         },\n// //       },\n// //       position: {\n// //         x: (Math.random() * window.innerWidth) / 2,\n// //         y: (Math.random() * window.innerHeight) / 2,\n// //       },\n// //     };\n// //     setNodes((nds) => nds.concat(newNode));\n// //     setNextNodeId(nextNodeId + 1);\n// //     setNodeType(\"\");\n// //   }, [nodeType, nextNodeId, setNodes]);\n\n// //   const updateNodeData = useCallback(\n// //     (e) => {\n// //       const newUrl = e.target.value;\n// //       setSelectedNode((prevNode) => ({\n// //         ...prevNode,\n// //         data: { ...prevNode.data, url: newUrl, label: newUrl },\n// //       }));\n// //       if (selectedNode.type === \"Select Dataset\") {\n// //         if (!number1) {\n// //           setNumber1(newUrl);\n// //         } else {\n// //           setNumber2(newUrl);\n// //         }\n// //       }\n// //     },\n// //     [selectedNode, number1]\n// //   );\n\n// //   const handleSubmit = useCallback(() => {\n// //     if (selectedNode) {\n// //       setNodes((currentNodes) =>\n// //         currentNodes.map((node) =>\n// //           node.id === selectedNode.id\n// //             ? {\n// //                 ...node,\n// //                 data: {\n// //                   ...node.data,\n// //                   url: selectedNode.data.url,\n// //                   label: selectedNode.data.url,\n// //                 },\n// //               }\n// //             : node\n// //         )\n// //       );\n// //       setSubmittedData(selectedNode.data);\n// //       setSelectedNode(null); // Optional: Clear selection after submit\n// //     }\n// //   }, [selectedNode, setNodes]);\n\n// //   return (\n// //     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n// //       <ReactFlow\n// //         nodes={nodes}\n// //         edges={edges}\n// //         onNodesChange={onNodesChange}\n// //         onEdgesChange={onEdgesChange}\n// //         onConnect={onConnect}\n// //         onNodeClick={onNodeClick}\n// //         nodeTypes={nodeTypes}\n// //         fitView\n// //         style={{ flexGrow: 1 }}\n// //       >\n// //         <MiniMap />\n// //         <Controls />\n// //         <Background color=\"#aaa\" gap={16} />\n// //       </ReactFlow>\n// //       <div\n// //         style={{\n// //           position: \"absolute\",\n// //           right: \"10px\",\n// //           top: \"10px\",\n// //           zIndex: 1000,\n// //         }}\n// //       >\n// //         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n// //           <option value=\"\">Select Node Type...</option>\n// //           <option value=\"Select Dataset\">Select Dataset</option>\n// //           <option value=\"Pre-processing\">Pre-processing</option>\n// //           <option value=\"Train\">Train</option>\n// //           <option value=\"Test\">Test</option>\n// //           <option value=\"Deploy\">Deploy</option>\n// //         </select>\n// //         <button onClick={addNode}>Add Node</button>\n// //         <button onClick={executeAction}>Execute Action</button>\n// //       </div>\n// //       {submittedData && (\n// //         <div\n// //           style={{\n// //             position: \"absolute\",\n// //             right: \"10px\",\n// //             top: \"160px\",\n// //             zIndex: 1000,\n// //             background: \"white\",\n// //             padding: \"10px\",\n// //             border: \"1px solid #ddd\",\n// //           }}\n// //         >\n// //           <div>\n// //             <strong>Submitted URL:</strong> {submittedData.url}\n// //           </div>\n// //           <div>\n// //             <strong>Result:</strong> {result}\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default FlowComponent;\n\n// // App.js\n// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./CustomNode\";\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [submittedData, setSubmittedData] = useState(null);\n//   const [number1, setNumber1] = useState(null);\n//   const [number2, setNumber2] = useState(null);\n//   const [result, setResult] = useState(null);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const onNodeClick = useCallback((event, node) => {\n//     setSelectedNode(node);\n//   }, []);\n\n//   const executeAction = useCallback(() => {\n//     if (number1 !== null && number2 !== null) {\n//       const sum = parseFloat(number1) + parseFloat(number2);\n//       setResult(sum);\n//     }\n//   }, [number1, number2]);\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     const newNode = {\n//       id: String(nextNodeId),\n//       type: \"customNode\",\n//       data: {\n//         label: `${nodeType} Node ${nextNodeId}`,\n//         dropdownValue: \"\",\n//         numberValue: \"\",\n//         stringValue: \"\",\n//         onDropdownChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, dropdownValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//         onNumberChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, numberValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//         onStringChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, stringValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//       },\n//       position: {\n//         x: (Math.random() * window.innerWidth) / 2,\n//         y: (Math.random() * window.innerHeight) / 2,\n//       },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//     setNextNodeId(nextNodeId + 1);\n//     setNodeType(\"\");\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const updateNodeData = useCallback(\n//     (e) => {\n//       const newUrl = e.target.value;\n//       setSelectedNode((prevNode) => ({\n//         ...prevNode,\n//         data: { ...prevNode.data, url: newUrl, label: newUrl },\n//       }));\n//       if (selectedNode.type === \"Select Dataset\") {\n//         if (!number1) {\n//           setNumber1(newUrl);\n//         } else {\n//           setNumber2(newUrl);\n//         }\n//       }\n//     },\n//     [selectedNode, number1]\n//   );\n\n//   const handleSubmit = useCallback(() => {\n//     if (selectedNode) {\n//       setNodes((currentNodes) =>\n//         currentNodes.map((node) =>\n//           node.id === selectedNode.id\n//             ? {\n//                 ...node,\n//                 data: {\n//                   ...node.data,\n//                   url: selectedNode.data.url,\n//                   label: selectedNode.data.url,\n//                 },\n//               }\n//             : node\n//         )\n//       );\n//       setSubmittedData(selectedNode.data);\n//       setSelectedNode(null); // Optional: Clear selection after submit\n//     }\n//   }, [selectedNode, setNodes]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         onNodeClick={onNodeClick}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Select Dataset\">Select Dataset</option>\n//           <option value=\"Pre-processing\">Pre-processing</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {submittedData && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             right: \"10px\",\n//             top: \"160px\",\n//             zIndex: 1000,\n//             background: \"white\",\n//             padding: \"10px\",\n//             border: \"1px solid #ddd\",\n//           }}\n//         >\n//           <div>\n//             <strong>Submitted URL:</strong> {submittedData.url}\n//           </div>\n//           <div>\n//             <strong>Result:</strong> {result}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\n// #################################################\n// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./CustomNode\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [selectedOption, setSelectedOption] = useState(\"\");\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     const newNode = {\n//       id: String(nextNodeId),\n//       type: \"customNode\",\n//       data: {\n//         label: `${nodeType} Node ${nextNodeId}`,\n//         dropdownValue: \"\",\n//         onDropdownChange: (value) => {\n//           setSelectedNode(String(nextNodeId));\n//           setSelectedOption(value);\n//           setIsPopupOpen(true);\n//         },\n//       },\n//       position: {\n//         x: (Math.random() * window.innerWidth) / 2,\n//         y: (Math.random() * window.innerHeight) / 2,\n//       },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//     setNextNodeId(nextNodeId + 1);\n//     setNodeType(\"\");\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = () => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, dropdownValue: selectedOption, hiddenValue: popupValue } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Select Dataset\">Select Dataset</option>\n//           <option value=\"Pre-processing\">Pre-processing</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//       </div>\n//       {isPopupOpen && (\n//         <div className=\"popup\">\n//           <label>Enter Value:</label>\n//           <input\n//             type=\"text\"\n//             value={popupValue}\n//             onChange={(e) => setPopupValue(e.target.value)}\n//           />\n//           <button onClick={handlePopupSubmit}>Submit</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\nimport React, { useCallback, useState } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport CustomNode from \"./CustomNode\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [];\nconst initialEdges = [];\nconst nodeTypes = {\n  customNode: CustomNode\n};\nfunction FlowComponent() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nextNodeId, setNextNodeId] = useState(3);\n  const [nodeType, setNodeType] = useState(\"\");\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [popupValue, setPopupValue] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const onConnect = useCallback(params => setEdges(els => addEdge(params, els)), [setEdges]);\n  const addNode = useCallback(() => {\n    if (!nodeType) return;\n    const newNode = {\n      id: String(nextNodeId),\n      type: \"customNode\",\n      data: {\n        label: `${nodeType} Node ${nextNodeId}`,\n        dropdownValue: \"\",\n        numberValue: \"\",\n        stringValue: \"\",\n        onDropdownChange: value => {\n          setSelectedNode(String(nextNodeId));\n          setSelectedOption(value);\n          setIsPopupOpen(true);\n        },\n        onNumberChange: value => {\n          setNodes(nds => nds.map(node => node.id === String(nextNodeId) ? {\n            ...node,\n            data: {\n              ...node.data,\n              numberValue: value\n            }\n          } : node));\n        },\n        onStringChange: value => {\n          setNodes(nds => nds.map(node => node.id === String(nextNodeId) ? {\n            ...node,\n            data: {\n              ...node.data,\n              stringValue: value\n            }\n          } : node));\n        }\n      },\n      position: {\n        x: Math.random() * window.innerWidth / 2,\n        y: Math.random() * window.innerHeight / 2\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n    setNextNodeId(nextNodeId + 1);\n    setNodeType(\"\");\n  }, [nodeType, nextNodeId, setNodes]);\n  const handlePopupSubmit = () => {\n    setNodes(nds => nds.map(node => node.id === selectedNode ? {\n      ...node,\n      data: {\n        ...node.data,\n        dropdownValue: selectedOption,\n        hiddenValue: popupValue\n      }\n    } : node));\n    setIsPopupOpen(false);\n    setPopupValue(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      style: {\n        flexGrow: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        right: \"10px\",\n        top: \"10px\",\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: nodeType,\n        onChange: e => setNodeType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Node Type...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Select Dataset\",\n          children: \"Select Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Pre-processing\",\n          children: \"Pre-processing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Train\",\n          children: \"Train\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Test\",\n          children: \"Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Deploy\",\n          children: \"Deploy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 618,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 7\n    }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enter Value:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: popupValue,\n        onChange: e => setPopupValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePopupSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 587,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowComponent, \"+mhxvjsCF/cPL/vekeKVUrm7VsI=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = FlowComponent;\nexport default FlowComponent;\nvar _c;\n$RefreshReg$(_c, \"FlowComponent\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","CustomNode","jsxDEV","_jsxDEV","initialNodes","initialEdges","nodeTypes","customNode","FlowComponent","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nextNodeId","setNextNodeId","nodeType","setNodeType","isPopupOpen","setIsPopupOpen","popupValue","setPopupValue","selectedNode","setSelectedNode","selectedOption","setSelectedOption","onConnect","params","els","addNode","newNode","id","String","type","data","label","dropdownValue","numberValue","stringValue","onDropdownChange","value","onNumberChange","nds","map","node","onStringChange","position","x","Math","random","window","innerWidth","y","innerHeight","concat","handlePopupSubmit","hiddenValue","style","height","display","flexDirection","children","fitView","flexGrow","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","right","top","zIndex","onChange","e","target","onClick","className","_c","$RefreshReg$"],"sources":["/Users/sreevaatsav/Downloads/UI/my-app/src/App.js"],"sourcesContent":["// // import React, { useCallback, useState } from \"react\";\n// // import ReactFlow, {\n// //   MiniMap,\n// //   Controls,\n// //   Background,\n// //   useNodesState,\n// //   useEdgesState,\n// //   addEdge,\n// // } from \"reactflow\";\n// // import \"reactflow/dist/style.css\";\n// // import CustomNode from \"./CustomNode\";\n\n// // const initialNodes = [];\n// // const initialEdges = [];\n\n// // const nodeTypes = {\n// //   customNode: CustomNode,\n// // };\n\n// // function FlowComponent() {\n// //   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n// //   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n// //   const [nextNodeId, setNextNodeId] = useState(3);\n// //   const [nodeType, setNodeType] = useState(\"\");\n// //   const [selectedNode, setSelectedNode] = useState(null);\n// //   const [submittedData, setSubmittedData] = useState(null);\n// //   const [number1, setNumber1] = useState(null);\n// //   const [number2, setNumber2] = useState(null);\n// //   const [result, setResult] = useState(null);\n\n// //   const onConnect = useCallback(\n// //     (params) => setEdges((els) => addEdge(params, els)),\n// //     [setEdges]\n// //   );\n\n// //   const onNodeClick = useCallback((event, node) => {\n// //     setSelectedNode(node);\n// //   }, []);\n\n// //   const executeAction = useCallback(() => {\n// //     if (number1 !== null && number2 !== null) {\n// //       const sum = parseFloat(number1) + parseFloat(number2);\n// //       setResult(sum);\n// //     }\n// //   }, [number1, number2]);\n\n// //   const addNode = useCallback(() => {\n// //     if (!nodeType) return;\n// //     const newNode = {\n// //       id: String(nextNodeId),\n// //       type: \"customNode\",\n// //       data: {\n// //         label: `${nodeType} Node ${nextNodeId}`,\n// //         value: \"\",\n// //         onChange: (value) => {\n// //           setNodes((nds) =>\n// //             nds.map((node) =>\n// //               node.id === String(nextNodeId)\n// //                 ? { ...node, data: { ...node.data, value: value } }\n// //                 : node\n// //             )\n// //           );\n// //         },\n// //       },\n// //       position: {\n// //         x: (Math.random() * window.innerWidth) / 2,\n// //         y: (Math.random() * window.innerHeight) / 2,\n// //       },\n// //     };\n// //     setNodes((nds) => nds.concat(newNode));\n// //     setNextNodeId(nextNodeId + 1);\n// //     setNodeType(\"\");\n// //   }, [nodeType, nextNodeId, setNodes]);\n\n// //   const updateNodeData = useCallback(\n// //     (e) => {\n// //       const newUrl = e.target.value;\n// //       setSelectedNode((prevNode) => ({\n// //         ...prevNode,\n// //         data: { ...prevNode.data, url: newUrl, label: newUrl },\n// //       }));\n// //       if (selectedNode.type === \"Select Dataset\") {\n// //         if (!number1) {\n// //           setNumber1(newUrl);\n// //         } else {\n// //           setNumber2(newUrl);\n// //         }\n// //       }\n// //     },\n// //     [selectedNode, number1]\n// //   );\n\n// //   const handleSubmit = useCallback(() => {\n// //     if (selectedNode) {\n// //       setNodes((currentNodes) =>\n// //         currentNodes.map((node) =>\n// //           node.id === selectedNode.id\n// //             ? {\n// //                 ...node,\n// //                 data: {\n// //                   ...node.data,\n// //                   url: selectedNode.data.url,\n// //                   label: selectedNode.data.url,\n// //                 },\n// //               }\n// //             : node\n// //         )\n// //       );\n// //       setSubmittedData(selectedNode.data);\n// //       setSelectedNode(null); // Optional: Clear selection after submit\n// //     }\n// //   }, [selectedNode, setNodes]);\n\n// //   return (\n// //     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n// //       <ReactFlow\n// //         nodes={nodes}\n// //         edges={edges}\n// //         onNodesChange={onNodesChange}\n// //         onEdgesChange={onEdgesChange}\n// //         onConnect={onConnect}\n// //         onNodeClick={onNodeClick}\n// //         nodeTypes={nodeTypes}\n// //         fitView\n// //         style={{ flexGrow: 1 }}\n// //       >\n// //         <MiniMap />\n// //         <Controls />\n// //         <Background color=\"#aaa\" gap={16} />\n// //       </ReactFlow>\n// //       <div\n// //         style={{\n// //           position: \"absolute\",\n// //           right: \"10px\",\n// //           top: \"10px\",\n// //           zIndex: 1000,\n// //         }}\n// //       >\n// //         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n// //           <option value=\"\">Select Node Type...</option>\n// //           <option value=\"Select Dataset\">Select Dataset</option>\n// //           <option value=\"Pre-processing\">Pre-processing</option>\n// //           <option value=\"Train\">Train</option>\n// //           <option value=\"Test\">Test</option>\n// //           <option value=\"Deploy\">Deploy</option>\n// //         </select>\n// //         <button onClick={addNode}>Add Node</button>\n// //         <button onClick={executeAction}>Execute Action</button>\n// //       </div>\n// //       {submittedData && (\n// //         <div\n// //           style={{\n// //             position: \"absolute\",\n// //             right: \"10px\",\n// //             top: \"160px\",\n// //             zIndex: 1000,\n// //             background: \"white\",\n// //             padding: \"10px\",\n// //             border: \"1px solid #ddd\",\n// //           }}\n// //         >\n// //           <div>\n// //             <strong>Submitted URL:</strong> {submittedData.url}\n// //           </div>\n// //           <div>\n// //             <strong>Result:</strong> {result}\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default FlowComponent;\n\n// // App.js\n// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./CustomNode\";\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [submittedData, setSubmittedData] = useState(null);\n//   const [number1, setNumber1] = useState(null);\n//   const [number2, setNumber2] = useState(null);\n//   const [result, setResult] = useState(null);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const onNodeClick = useCallback((event, node) => {\n//     setSelectedNode(node);\n//   }, []);\n\n//   const executeAction = useCallback(() => {\n//     if (number1 !== null && number2 !== null) {\n//       const sum = parseFloat(number1) + parseFloat(number2);\n//       setResult(sum);\n//     }\n//   }, [number1, number2]);\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     const newNode = {\n//       id: String(nextNodeId),\n//       type: \"customNode\",\n//       data: {\n//         label: `${nodeType} Node ${nextNodeId}`,\n//         dropdownValue: \"\",\n//         numberValue: \"\",\n//         stringValue: \"\",\n//         onDropdownChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, dropdownValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//         onNumberChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, numberValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//         onStringChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, stringValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//       },\n//       position: {\n//         x: (Math.random() * window.innerWidth) / 2,\n//         y: (Math.random() * window.innerHeight) / 2,\n//       },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//     setNextNodeId(nextNodeId + 1);\n//     setNodeType(\"\");\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const updateNodeData = useCallback(\n//     (e) => {\n//       const newUrl = e.target.value;\n//       setSelectedNode((prevNode) => ({\n//         ...prevNode,\n//         data: { ...prevNode.data, url: newUrl, label: newUrl },\n//       }));\n//       if (selectedNode.type === \"Select Dataset\") {\n//         if (!number1) {\n//           setNumber1(newUrl);\n//         } else {\n//           setNumber2(newUrl);\n//         }\n//       }\n//     },\n//     [selectedNode, number1]\n//   );\n\n//   const handleSubmit = useCallback(() => {\n//     if (selectedNode) {\n//       setNodes((currentNodes) =>\n//         currentNodes.map((node) =>\n//           node.id === selectedNode.id\n//             ? {\n//                 ...node,\n//                 data: {\n//                   ...node.data,\n//                   url: selectedNode.data.url,\n//                   label: selectedNode.data.url,\n//                 },\n//               }\n//             : node\n//         )\n//       );\n//       setSubmittedData(selectedNode.data);\n//       setSelectedNode(null); // Optional: Clear selection after submit\n//     }\n//   }, [selectedNode, setNodes]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         onNodeClick={onNodeClick}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Select Dataset\">Select Dataset</option>\n//           <option value=\"Pre-processing\">Pre-processing</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {submittedData && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             right: \"10px\",\n//             top: \"160px\",\n//             zIndex: 1000,\n//             background: \"white\",\n//             padding: \"10px\",\n//             border: \"1px solid #ddd\",\n//           }}\n//         >\n//           <div>\n//             <strong>Submitted URL:</strong> {submittedData.url}\n//           </div>\n//           <div>\n//             <strong>Result:</strong> {result}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\n// #################################################\n// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./CustomNode\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [selectedOption, setSelectedOption] = useState(\"\");\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     const newNode = {\n//       id: String(nextNodeId),\n//       type: \"customNode\",\n//       data: {\n//         label: `${nodeType} Node ${nextNodeId}`,\n//         dropdownValue: \"\",\n//         onDropdownChange: (value) => {\n//           setSelectedNode(String(nextNodeId));\n//           setSelectedOption(value);\n//           setIsPopupOpen(true);\n//         },\n//       },\n//       position: {\n//         x: (Math.random() * window.innerWidth) / 2,\n//         y: (Math.random() * window.innerHeight) / 2,\n//       },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//     setNextNodeId(nextNodeId + 1);\n//     setNodeType(\"\");\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = () => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, dropdownValue: selectedOption, hiddenValue: popupValue } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Select Dataset\">Select Dataset</option>\n//           <option value=\"Pre-processing\">Pre-processing</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//       </div>\n//       {isPopupOpen && (\n//         <div className=\"popup\">\n//           <label>Enter Value:</label>\n//           <input\n//             type=\"text\"\n//             value={popupValue}\n//             onChange={(e) => setPopupValue(e.target.value)}\n//           />\n//           <button onClick={handlePopupSubmit}>Submit</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\nimport React, { useCallback, useState } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport CustomNode from \"./CustomNode\";\nimport './App.css';\n\nconst initialNodes = [];\nconst initialEdges = [];\n\nconst nodeTypes = {\n  customNode: CustomNode,\n};\n\nfunction FlowComponent() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nextNodeId, setNextNodeId] = useState(3);\n  const [nodeType, setNodeType] = useState(\"\");\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [popupValue, setPopupValue] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedOption, setSelectedOption] = useState(\"\");\n\n  const onConnect = useCallback(\n    (params) => setEdges((els) => addEdge(params, els)),\n    [setEdges]\n  );\n\n  const addNode = useCallback(() => {\n    if (!nodeType) return;\n    const newNode = {\n      id: String(nextNodeId),\n      type: \"customNode\",\n      data: {\n        label: `${nodeType} Node ${nextNodeId}`,\n        dropdownValue: \"\",\n        numberValue: \"\",\n        stringValue: \"\",\n        onDropdownChange: (value) => {\n          setSelectedNode(String(nextNodeId));\n          setSelectedOption(value);\n          setIsPopupOpen(true);\n        },\n        onNumberChange: (value) => {\n          setNodes((nds) =>\n            nds.map((node) =>\n              node.id === String(nextNodeId)\n                ? { ...node, data: { ...node.data, numberValue: value } }\n                : node\n            )\n          );\n        },\n        onStringChange: (value) => {\n          setNodes((nds) =>\n            nds.map((node) =>\n              node.id === String(nextNodeId)\n                ? { ...node, data: { ...node.data, stringValue: value } }\n                : node\n            )\n          );\n        },\n      },\n      position: {\n        x: (Math.random() * window.innerWidth) / 2,\n        y: (Math.random() * window.innerHeight) / 2,\n      },\n    };\n    setNodes((nds) => nds.concat(newNode));\n    setNextNodeId(nextNodeId + 1);\n    setNodeType(\"\");\n  }, [nodeType, nextNodeId, setNodes]);\n\n  const handlePopupSubmit = () => {\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNode\n          ? { ...node, data: { ...node.data, dropdownValue: selectedOption, hiddenValue: popupValue } }\n          : node\n      )\n    );\n    setIsPopupOpen(false);\n    setPopupValue(\"\");\n  };\n\n  return (\n    <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        fitView\n        style={{ flexGrow: 1 }}\n      >\n        <MiniMap />\n        <Controls />\n        <Background color=\"#aaa\" gap={16} />\n      </ReactFlow>\n      <div\n        style={{\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\",\n          zIndex: 1000,\n        }}\n      >\n        <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n          <option value=\"\">Select Node Type...</option>\n          <option value=\"Select Dataset\">Select Dataset</option>\n          <option value=\"Pre-processing\">Pre-processing</option>\n          <option value=\"Train\">Train</option>\n          <option value=\"Test\">Test</option>\n          <option value=\"Deploy\">Deploy</option>\n        </select>\n        <button onClick={addNode}>Add Node</button>\n      </div>\n      {isPopupOpen && (\n        <div className=\"popup\">\n          <label>Enter Value:</label>\n          <input\n            type=\"text\"\n            value={popupValue}\n            onChange={(e) => setPopupValue(e.target.value)}\n          />\n          <button onClick={handlePopupSubmit}>Submit</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FlowComponent;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}