{"ast":null,"code":"// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./components/CustomNode\";\n// import Popup from \"./components/Popup\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const isValidConnection = (connection) => {\n//     const sourceNode = nodes.find(node => node.id === connection.source);\n//     const targetNode = nodes.find(node => node.id === connection.target);\n//     if (!sourceNode || !targetNode) return false;\n\n//     const sourceType = sourceNode.data.label.split(\" \")[0];\n//     const targetType = targetNode.data.label.split(\" \")[0];\n\n//     if (sourceType === \"Dataset\" && (targetType === \"Preprocess\" || targetType === \"Train\")) {\n//       return true;\n//     }\n//     if (sourceType === \"Preprocess\" && targetType === \"Train\") {\n//       return true;\n//     }\n//     if (sourceType === \"Train\" && targetType === \"Test\") {\n//       return true;\n//     }\n//     if (sourceType === \"Test\" && targetType === \"Deploy\") {\n//       return true;\n//     }\n//     return false;\n//   };\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     let newNode;\n//     const commonCallbacks = {\n//       onDropdownChange: () => {},\n//       onNumberChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onStringChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onFileChange: () => {},\n//     };\n//     switch (nodeType) {\n//       case \"Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             url: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Upload Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             file: \"\",\n//             ...commonCallbacks,\n//             onFileChange: (file) => {\n//               setNodes((nds) =>\n//                 nds.map((node) =>\n//                   node.id === String(nextNodeId)\n//                     ? { ...node, data: { ...node.data, file } }\n//                     : node\n//                 )\n//               );\n//             },\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Preprocess\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             prompt: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Train\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             temperature: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Test\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             input: \"\",\n//             output: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Deploy\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             typeValue: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       default:\n//         break;\n//     }\n\n//     if (newNode) {\n//       setNodes((nds) => nds.concat(newNode));\n//       setNextNodeId(nextNodeId + 1);\n//       setNodeType(\"\");\n//     }\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = (value) => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, cred: value } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   const executeAction = useCallback(() => {\n//     fetch('http://localhost:5000/execute', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ nodes, edges }),\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         if (data.status === 'success') {\n//           alert('Flow is valid!');\n//         } else {\n//           alert(`Error: ${data.message}`);\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   }, [nodes, edges]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         isValidConnection={isValidConnection}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Dataset\">Dataset</option>\n//           <option value=\"Upload Dataset\">Upload Dataset</option>\n//           <option value=\"Preprocess\">Preprocess</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {isPopupOpen && (\n//         <Popup value={popupValue} onChange={setPopupValue} onSubmit={handlePopupSubmit} />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./components/CustomNode\";\n// import Popup from \"./components/Popup\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n\n//   const pollNodeStatus = useCallback(() => {\n//     fetch('http://localhost:5000/status')\n//       .then(response => response.json())\n//       .then(statuses => {\n//         setNodes(nds => nds.map(node => {\n//           const status = statuses[node.id];\n//           if (status === 'completed') {\n//             return { ...node, style: { ...node.style, backgroundColor: 'green' } };\n//           }\n//           return node;\n//         }));\n//       })\n//       .catch(error => console.error('Error fetching node statuses:', error));\n//   }, [setNodes]);\n\n//   useEffect(() => {\n//     const interval = setInterval(pollNodeStatus, 1000);\n//     return () => clearInterval(interval);\n//   }, [pollNodeStatus]);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const isValidConnection = (connection) => {\n//     const sourceNode = nodes.find(node => node.id === connection.source);\n//     const targetNode = nodes.find(node => node.id === connection.target);\n//     if (!sourceNode || !targetNode) return false;\n\n//     const sourceType = sourceNode.data.label.split(\" \")[0];\n//     const targetType = targetNode.data.label.split(\" \")[0];\n\n//     if (sourceType === \"Dataset\" && (targetType === \"Preprocess\" || targetType === \"Train\")) {\n//       return true;\n//     }\n//     if (sourceType === \"Preprocess\" && targetType === \"Train\") {\n//       return true;\n//     }\n//     if (sourceType === \"Train\" && targetType === \"Test\") {\n//       return true;\n//     }\n//     if (sourceType === \"Test\" && targetType === \"Deploy\") {\n//       return true;\n//     }\n//     return false;\n//   };\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     let newNode;\n//     const commonCallbacks = {\n//       onDropdownChange: () => {},\n//       onNumberChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onStringChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onFileChange: () => {},\n//     };\n//     switch (nodeType) {\n//       case \"Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             url: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Upload Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             file: \"\",\n//             ...commonCallbacks,\n//             onFileChange: (file) => {\n//               setNodes((nds) =>\n//                 nds.map((node) =>\n//                   node.id === String(nextNodeId)\n//                     ? { ...node, data: { ...node.data, file } }\n//                     : node\n//                 )\n//               );\n//             },\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Preprocess\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             prompt: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Train\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             temperature: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Test\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             input: \"\",\n//             output: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Deploy\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             typeValue: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       default:\n//         break;\n//     }\n\n//     if (newNode) {\n//       setNodes((nds) => nds.concat(newNode));\n//       setNextNodeId(nextNodeId + 1);\n//       setNodeType(\"\");\n//     }\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = (value) => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, cred: value } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   const executeAction = useCallback(() => {\n//     fetch('http://localhost:5000/execute', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ nodes, edges }),\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         if (data.status === 'success') {\n//           alert('Flow is valid!');\n//         } else {\n//           alert(`Error: ${data.message}`);\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   }, [nodes, edges]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         isValidConnection={isValidConnection}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Dataset\">Dataset</option>\n//           <option value=\"Upload Dataset\">Upload Dataset</option>\n//           <option value=\"Preprocess\">Preprocess</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {isPopupOpen && (\n//         <Popup value={popupValue} onChange={setPopupValue} onSubmit={handlePopupSubmit} />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;","map":{"version":3,"names":[],"sources":["/Users/sreevaatsav/Downloads/UI copy 4/my-app/src/App.js"],"sourcesContent":["// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./components/CustomNode\";\n// import Popup from \"./components/Popup\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const isValidConnection = (connection) => {\n//     const sourceNode = nodes.find(node => node.id === connection.source);\n//     const targetNode = nodes.find(node => node.id === connection.target);\n//     if (!sourceNode || !targetNode) return false;\n\n//     const sourceType = sourceNode.data.label.split(\" \")[0];\n//     const targetType = targetNode.data.label.split(\" \")[0];\n\n//     if (sourceType === \"Dataset\" && (targetType === \"Preprocess\" || targetType === \"Train\")) {\n//       return true;\n//     }\n//     if (sourceType === \"Preprocess\" && targetType === \"Train\") {\n//       return true;\n//     }\n//     if (sourceType === \"Train\" && targetType === \"Test\") {\n//       return true;\n//     }\n//     if (sourceType === \"Test\" && targetType === \"Deploy\") {\n//       return true;\n//     }\n//     return false;\n//   };\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     let newNode;\n//     const commonCallbacks = {\n//       onDropdownChange: () => {},\n//       onNumberChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onStringChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onFileChange: () => {},\n//     };\n//     switch (nodeType) {\n//       case \"Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             url: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Upload Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             file: \"\",\n//             ...commonCallbacks,\n//             onFileChange: (file) => {\n//               setNodes((nds) =>\n//                 nds.map((node) =>\n//                   node.id === String(nextNodeId)\n//                     ? { ...node, data: { ...node.data, file } }\n//                     : node\n//                 )\n//               );\n//             },\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Preprocess\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             prompt: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Train\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             temperature: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Test\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             input: \"\",\n//             output: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Deploy\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             typeValue: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       default:\n//         break;\n//     }\n\n//     if (newNode) {\n//       setNodes((nds) => nds.concat(newNode));\n//       setNextNodeId(nextNodeId + 1);\n//       setNodeType(\"\");\n//     }\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = (value) => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, cred: value } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   const executeAction = useCallback(() => {\n//     fetch('http://localhost:5000/execute', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ nodes, edges }),\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         if (data.status === 'success') {\n//           alert('Flow is valid!');\n//         } else {\n//           alert(`Error: ${data.message}`);\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   }, [nodes, edges]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         isValidConnection={isValidConnection}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Dataset\">Dataset</option>\n//           <option value=\"Upload Dataset\">Upload Dataset</option>\n//           <option value=\"Preprocess\">Preprocess</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {isPopupOpen && (\n//         <Popup value={popupValue} onChange={setPopupValue} onSubmit={handlePopupSubmit} />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./components/CustomNode\";\n// import Popup from \"./components/Popup\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n\n//   const pollNodeStatus = useCallback(() => {\n//     fetch('http://localhost:5000/status')\n//       .then(response => response.json())\n//       .then(statuses => {\n//         setNodes(nds => nds.map(node => {\n//           const status = statuses[node.id];\n//           if (status === 'completed') {\n//             return { ...node, style: { ...node.style, backgroundColor: 'green' } };\n//           }\n//           return node;\n//         }));\n//       })\n//       .catch(error => console.error('Error fetching node statuses:', error));\n//   }, [setNodes]);\n\n//   useEffect(() => {\n//     const interval = setInterval(pollNodeStatus, 1000);\n//     return () => clearInterval(interval);\n//   }, [pollNodeStatus]);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const isValidConnection = (connection) => {\n//     const sourceNode = nodes.find(node => node.id === connection.source);\n//     const targetNode = nodes.find(node => node.id === connection.target);\n//     if (!sourceNode || !targetNode) return false;\n\n//     const sourceType = sourceNode.data.label.split(\" \")[0];\n//     const targetType = targetNode.data.label.split(\" \")[0];\n\n//     if (sourceType === \"Dataset\" && (targetType === \"Preprocess\" || targetType === \"Train\")) {\n//       return true;\n//     }\n//     if (sourceType === \"Preprocess\" && targetType === \"Train\") {\n//       return true;\n//     }\n//     if (sourceType === \"Train\" && targetType === \"Test\") {\n//       return true;\n//     }\n//     if (sourceType === \"Test\" && targetType === \"Deploy\") {\n//       return true;\n//     }\n//     return false;\n//   };\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     let newNode;\n//     const commonCallbacks = {\n//       onDropdownChange: () => {},\n//       onNumberChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onStringChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onFileChange: () => {},\n//     };\n//     switch (nodeType) {\n//       case \"Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             url: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Upload Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             file: \"\",\n//             ...commonCallbacks,\n//             onFileChange: (file) => {\n//               setNodes((nds) =>\n//                 nds.map((node) =>\n//                   node.id === String(nextNodeId)\n//                     ? { ...node, data: { ...node.data, file } }\n//                     : node\n//                 )\n//               );\n//             },\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Preprocess\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             prompt: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Train\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             temperature: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Test\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             input: \"\",\n//             output: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Deploy\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             typeValue: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       default:\n//         break;\n//     }\n\n//     if (newNode) {\n//       setNodes((nds) => nds.concat(newNode));\n//       setNextNodeId(nextNodeId + 1);\n//       setNodeType(\"\");\n//     }\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = (value) => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, cred: value } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   const executeAction = useCallback(() => {\n//     fetch('http://localhost:5000/execute', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ nodes, edges }),\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         if (data.status === 'success') {\n//           alert('Flow is valid!');\n//         } else {\n//           alert(`Error: ${data.message}`);\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   }, [nodes, edges]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         isValidConnection={isValidConnection}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Dataset\">Dataset</option>\n//           <option value=\"Upload Dataset\">Upload Dataset</option>\n//           <option value=\"Preprocess\">Preprocess</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {isPopupOpen && (\n//         <Popup value={popupValue} onChange={setPopupValue} onSubmit={handlePopupSubmit} />\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}