{"ast":null,"code":"// // import React, { useCallback, useState } from \"react\";\n// // import ReactFlow, {\n// //   MiniMap,\n// //   Controls,\n// //   Background,\n// //   useNodesState,\n// //   useEdgesState,\n// //   addEdge,\n// // } from \"reactflow\";\n// // import \"reactflow/dist/style.css\";\n// // import CustomNode from \"./CustomNode\";\n\n// // const initialNodes = [];\n// // const initialEdges = [];\n\n// // const nodeTypes = {\n// //   customNode: CustomNode,\n// // };\n\n// // function FlowComponent() {\n// //   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n// //   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n// //   const [nextNodeId, setNextNodeId] = useState(3);\n// //   const [nodeType, setNodeType] = useState(\"\");\n// //   const [selectedNode, setSelectedNode] = useState(null);\n// //   const [submittedData, setSubmittedData] = useState(null);\n// //   const [number1, setNumber1] = useState(null);\n// //   const [number2, setNumber2] = useState(null);\n// //   const [result, setResult] = useState(null);\n\n// //   const onConnect = useCallback(\n// //     (params) => setEdges((els) => addEdge(params, els)),\n// //     [setEdges]\n// //   );\n\n// //   const onNodeClick = useCallback((event, node) => {\n// //     setSelectedNode(node);\n// //   }, []);\n\n// //   const executeAction = useCallback(() => {\n// //     if (number1 !== null && number2 !== null) {\n// //       const sum = parseFloat(number1) + parseFloat(number2);\n// //       setResult(sum);\n// //     }\n// //   }, [number1, number2]);\n\n// //   const addNode = useCallback(() => {\n// //     if (!nodeType) return;\n// //     const newNode = {\n// //       id: String(nextNodeId),\n// //       type: \"customNode\",\n// //       data: {\n// //         label: `${nodeType} Node ${nextNodeId}`,\n// //         value: \"\",\n// //         onChange: (value) => {\n// //           setNodes((nds) =>\n// //             nds.map((node) =>\n// //               node.id === String(nextNodeId)\n// //                 ? { ...node, data: { ...node.data, value: value } }\n// //                 : node\n// //             )\n// //           );\n// //         },\n// //       },\n// //       position: {\n// //         x: (Math.random() * window.innerWidth) / 2,\n// //         y: (Math.random() * window.innerHeight) / 2,\n// //       },\n// //     };\n// //     setNodes((nds) => nds.concat(newNode));\n// //     setNextNodeId(nextNodeId + 1);\n// //     setNodeType(\"\");\n// //   }, [nodeType, nextNodeId, setNodes]);\n\n// //   const updateNodeData = useCallback(\n// //     (e) => {\n// //       const newUrl = e.target.value;\n// //       setSelectedNode((prevNode) => ({\n// //         ...prevNode,\n// //         data: { ...prevNode.data, url: newUrl, label: newUrl },\n// //       }));\n// //       if (selectedNode.type === \"Select Dataset\") {\n// //         if (!number1) {\n// //           setNumber1(newUrl);\n// //         } else {\n// //           setNumber2(newUrl);\n// //         }\n// //       }\n// //     },\n// //     [selectedNode, number1]\n// //   );\n\n// //   const handleSubmit = useCallback(() => {\n// //     if (selectedNode) {\n// //       setNodes((currentNodes) =>\n// //         currentNodes.map((node) =>\n// //           node.id === selectedNode.id\n// //             ? {\n// //                 ...node,\n// //                 data: {\n// //                   ...node.data,\n// //                   url: selectedNode.data.url,\n// //                   label: selectedNode.data.url,\n// //                 },\n// //               }\n// //             : node\n// //         )\n// //       );\n// //       setSubmittedData(selectedNode.data);\n// //       setSelectedNode(null); // Optional: Clear selection after submit\n// //     }\n// //   }, [selectedNode, setNodes]);\n\n// //   return (\n// //     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n// //       <ReactFlow\n// //         nodes={nodes}\n// //         edges={edges}\n// //         onNodesChange={onNodesChange}\n// //         onEdgesChange={onEdgesChange}\n// //         onConnect={onConnect}\n// //         onNodeClick={onNodeClick}\n// //         nodeTypes={nodeTypes}\n// //         fitView\n// //         style={{ flexGrow: 1 }}\n// //       >\n// //         <MiniMap />\n// //         <Controls />\n// //         <Background color=\"#aaa\" gap={16} />\n// //       </ReactFlow>\n// //       <div\n// //         style={{\n// //           position: \"absolute\",\n// //           right: \"10px\",\n// //           top: \"10px\",\n// //           zIndex: 1000,\n// //         }}\n// //       >\n// //         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n// //           <option value=\"\">Select Node Type...</option>\n// //           <option value=\"Select Dataset\">Select Dataset</option>\n// //           <option value=\"Pre-processing\">Pre-processing</option>\n// //           <option value=\"Train\">Train</option>\n// //           <option value=\"Test\">Test</option>\n// //           <option value=\"Deploy\">Deploy</option>\n// //         </select>\n// //         <button onClick={addNode}>Add Node</button>\n// //         <button onClick={executeAction}>Execute Action</button>\n// //       </div>\n// //       {submittedData && (\n// //         <div\n// //           style={{\n// //             position: \"absolute\",\n// //             right: \"10px\",\n// //             top: \"160px\",\n// //             zIndex: 1000,\n// //             background: \"white\",\n// //             padding: \"10px\",\n// //             border: \"1px solid #ddd\",\n// //           }}\n// //         >\n// //           <div>\n// //             <strong>Submitted URL:</strong> {submittedData.url}\n// //           </div>\n// //           <div>\n// //             <strong>Result:</strong> {result}\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default FlowComponent;\n\n// // App.js\n// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./CustomNode\";\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [submittedData, setSubmittedData] = useState(null);\n//   const [number1, setNumber1] = useState(null);\n//   const [number2, setNumber2] = useState(null);\n//   const [result, setResult] = useState(null);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const onNodeClick = useCallback((event, node) => {\n//     setSelectedNode(node);\n//   }, []);\n\n//   const executeAction = useCallback(() => {\n//     if (number1 !== null && number2 !== null) {\n//       const sum = parseFloat(number1) + parseFloat(number2);\n//       setResult(sum);\n//     }\n//   }, [number1, number2]);\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     const newNode = {\n//       id: String(nextNodeId),\n//       type: \"customNode\",\n//       data: {\n//         label: `${nodeType} Node ${nextNodeId}`,\n//         dropdownValue: \"\",\n//         numberValue: \"\",\n//         stringValue: \"\",\n//         onDropdownChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, dropdownValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//         onNumberChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, numberValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//         onStringChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, stringValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//       },\n//       position: {\n//         x: (Math.random() * window.innerWidth) / 2,\n//         y: (Math.random() * window.innerHeight) / 2,\n//       },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//     setNextNodeId(nextNodeId + 1);\n//     setNodeType(\"\");\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const updateNodeData = useCallback(\n//     (e) => {\n//       const newUrl = e.target.value;\n//       setSelectedNode((prevNode) => ({\n//         ...prevNode,\n//         data: { ...prevNode.data, url: newUrl, label: newUrl },\n//       }));\n//       if (selectedNode.type === \"Select Dataset\") {\n//         if (!number1) {\n//           setNumber1(newUrl);\n//         } else {\n//           setNumber2(newUrl);\n//         }\n//       }\n//     },\n//     [selectedNode, number1]\n//   );\n\n//   const handleSubmit = useCallback(() => {\n//     if (selectedNode) {\n//       setNodes((currentNodes) =>\n//         currentNodes.map((node) =>\n//           node.id === selectedNode.id\n//             ? {\n//                 ...node,\n//                 data: {\n//                   ...node.data,\n//                   url: selectedNode.data.url,\n//                   label: selectedNode.data.url,\n//                 },\n//               }\n//             : node\n//         )\n//       );\n//       setSubmittedData(selectedNode.data);\n//       setSelectedNode(null); // Optional: Clear selection after submit\n//     }\n//   }, [selectedNode, setNodes]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         onNodeClick={onNodeClick}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Select Dataset\">Select Dataset</option>\n//           <option value=\"Pre-processing\">Pre-processing</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {submittedData && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             right: \"10px\",\n//             top: \"160px\",\n//             zIndex: 1000,\n//             background: \"white\",\n//             padding: \"10px\",\n//             border: \"1px solid #ddd\",\n//           }}\n//         >\n//           <div>\n//             <strong>Submitted URL:</strong> {submittedData.url}\n//           </div>\n//           <div>\n//             <strong>Result:</strong> {result}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\n// #################################################\n// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./CustomNode\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [selectedOption, setSelectedOption] = useState(\"\");\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     const newNode = {\n//       id: String(nextNodeId),\n//       type: \"customNode\",\n//       data: {\n//         label: `${nodeType} Node ${nextNodeId}`,\n//         dropdownValue: \"\",\n//         onDropdownChange: (value) => {\n//           setSelectedNode(String(nextNodeId));\n//           setSelectedOption(value);\n//           setIsPopupOpen(true);\n//         },\n//       },\n//       position: {\n//         x: (Math.random() * window.innerWidth) / 2,\n//         y: (Math.random() * window.innerHeight) / 2,\n//       },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//     setNextNodeId(nextNodeId + 1);\n//     setNodeType(\"\");\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = () => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, dropdownValue: selectedOption, hiddenValue: popupValue } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Select Dataset\">Select Dataset</option>\n//           <option value=\"Pre-processing\">Pre-processing</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//       </div>\n//       {isPopupOpen && (\n//         <div className=\"popup\">\n//           <label>Enter Value:</label>\n//           <input\n//             type=\"text\"\n//             value={popupValue}\n//             onChange={(e) => setPopupValue(e.target.value)}\n//           />\n//           <button onClick={handlePopupSubmit}>Submit</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;","map":{"version":3,"names":[],"sources":["/Users/sreevaatsav/Downloads/UI/my-app/src/App.js"],"sourcesContent":["// // import React, { useCallback, useState } from \"react\";\n// // import ReactFlow, {\n// //   MiniMap,\n// //   Controls,\n// //   Background,\n// //   useNodesState,\n// //   useEdgesState,\n// //   addEdge,\n// // } from \"reactflow\";\n// // import \"reactflow/dist/style.css\";\n// // import CustomNode from \"./CustomNode\";\n\n// // const initialNodes = [];\n// // const initialEdges = [];\n\n// // const nodeTypes = {\n// //   customNode: CustomNode,\n// // };\n\n// // function FlowComponent() {\n// //   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n// //   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n// //   const [nextNodeId, setNextNodeId] = useState(3);\n// //   const [nodeType, setNodeType] = useState(\"\");\n// //   const [selectedNode, setSelectedNode] = useState(null);\n// //   const [submittedData, setSubmittedData] = useState(null);\n// //   const [number1, setNumber1] = useState(null);\n// //   const [number2, setNumber2] = useState(null);\n// //   const [result, setResult] = useState(null);\n\n// //   const onConnect = useCallback(\n// //     (params) => setEdges((els) => addEdge(params, els)),\n// //     [setEdges]\n// //   );\n\n// //   const onNodeClick = useCallback((event, node) => {\n// //     setSelectedNode(node);\n// //   }, []);\n\n// //   const executeAction = useCallback(() => {\n// //     if (number1 !== null && number2 !== null) {\n// //       const sum = parseFloat(number1) + parseFloat(number2);\n// //       setResult(sum);\n// //     }\n// //   }, [number1, number2]);\n\n// //   const addNode = useCallback(() => {\n// //     if (!nodeType) return;\n// //     const newNode = {\n// //       id: String(nextNodeId),\n// //       type: \"customNode\",\n// //       data: {\n// //         label: `${nodeType} Node ${nextNodeId}`,\n// //         value: \"\",\n// //         onChange: (value) => {\n// //           setNodes((nds) =>\n// //             nds.map((node) =>\n// //               node.id === String(nextNodeId)\n// //                 ? { ...node, data: { ...node.data, value: value } }\n// //                 : node\n// //             )\n// //           );\n// //         },\n// //       },\n// //       position: {\n// //         x: (Math.random() * window.innerWidth) / 2,\n// //         y: (Math.random() * window.innerHeight) / 2,\n// //       },\n// //     };\n// //     setNodes((nds) => nds.concat(newNode));\n// //     setNextNodeId(nextNodeId + 1);\n// //     setNodeType(\"\");\n// //   }, [nodeType, nextNodeId, setNodes]);\n\n// //   const updateNodeData = useCallback(\n// //     (e) => {\n// //       const newUrl = e.target.value;\n// //       setSelectedNode((prevNode) => ({\n// //         ...prevNode,\n// //         data: { ...prevNode.data, url: newUrl, label: newUrl },\n// //       }));\n// //       if (selectedNode.type === \"Select Dataset\") {\n// //         if (!number1) {\n// //           setNumber1(newUrl);\n// //         } else {\n// //           setNumber2(newUrl);\n// //         }\n// //       }\n// //     },\n// //     [selectedNode, number1]\n// //   );\n\n// //   const handleSubmit = useCallback(() => {\n// //     if (selectedNode) {\n// //       setNodes((currentNodes) =>\n// //         currentNodes.map((node) =>\n// //           node.id === selectedNode.id\n// //             ? {\n// //                 ...node,\n// //                 data: {\n// //                   ...node.data,\n// //                   url: selectedNode.data.url,\n// //                   label: selectedNode.data.url,\n// //                 },\n// //               }\n// //             : node\n// //         )\n// //       );\n// //       setSubmittedData(selectedNode.data);\n// //       setSelectedNode(null); // Optional: Clear selection after submit\n// //     }\n// //   }, [selectedNode, setNodes]);\n\n// //   return (\n// //     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n// //       <ReactFlow\n// //         nodes={nodes}\n// //         edges={edges}\n// //         onNodesChange={onNodesChange}\n// //         onEdgesChange={onEdgesChange}\n// //         onConnect={onConnect}\n// //         onNodeClick={onNodeClick}\n// //         nodeTypes={nodeTypes}\n// //         fitView\n// //         style={{ flexGrow: 1 }}\n// //       >\n// //         <MiniMap />\n// //         <Controls />\n// //         <Background color=\"#aaa\" gap={16} />\n// //       </ReactFlow>\n// //       <div\n// //         style={{\n// //           position: \"absolute\",\n// //           right: \"10px\",\n// //           top: \"10px\",\n// //           zIndex: 1000,\n// //         }}\n// //       >\n// //         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n// //           <option value=\"\">Select Node Type...</option>\n// //           <option value=\"Select Dataset\">Select Dataset</option>\n// //           <option value=\"Pre-processing\">Pre-processing</option>\n// //           <option value=\"Train\">Train</option>\n// //           <option value=\"Test\">Test</option>\n// //           <option value=\"Deploy\">Deploy</option>\n// //         </select>\n// //         <button onClick={addNode}>Add Node</button>\n// //         <button onClick={executeAction}>Execute Action</button>\n// //       </div>\n// //       {submittedData && (\n// //         <div\n// //           style={{\n// //             position: \"absolute\",\n// //             right: \"10px\",\n// //             top: \"160px\",\n// //             zIndex: 1000,\n// //             background: \"white\",\n// //             padding: \"10px\",\n// //             border: \"1px solid #ddd\",\n// //           }}\n// //         >\n// //           <div>\n// //             <strong>Submitted URL:</strong> {submittedData.url}\n// //           </div>\n// //           <div>\n// //             <strong>Result:</strong> {result}\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default FlowComponent;\n\n// // App.js\n// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./CustomNode\";\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [submittedData, setSubmittedData] = useState(null);\n//   const [number1, setNumber1] = useState(null);\n//   const [number2, setNumber2] = useState(null);\n//   const [result, setResult] = useState(null);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const onNodeClick = useCallback((event, node) => {\n//     setSelectedNode(node);\n//   }, []);\n\n//   const executeAction = useCallback(() => {\n//     if (number1 !== null && number2 !== null) {\n//       const sum = parseFloat(number1) + parseFloat(number2);\n//       setResult(sum);\n//     }\n//   }, [number1, number2]);\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     const newNode = {\n//       id: String(nextNodeId),\n//       type: \"customNode\",\n//       data: {\n//         label: `${nodeType} Node ${nextNodeId}`,\n//         dropdownValue: \"\",\n//         numberValue: \"\",\n//         stringValue: \"\",\n//         onDropdownChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, dropdownValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//         onNumberChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, numberValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//         onStringChange: (value) => {\n//           setNodes((nds) =>\n//             nds.map((node) =>\n//               node.id === String(nextNodeId)\n//                 ? { ...node, data: { ...node.data, stringValue: value } }\n//                 : node\n//             )\n//           );\n//         },\n//       },\n//       position: {\n//         x: (Math.random() * window.innerWidth) / 2,\n//         y: (Math.random() * window.innerHeight) / 2,\n//       },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//     setNextNodeId(nextNodeId + 1);\n//     setNodeType(\"\");\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const updateNodeData = useCallback(\n//     (e) => {\n//       const newUrl = e.target.value;\n//       setSelectedNode((prevNode) => ({\n//         ...prevNode,\n//         data: { ...prevNode.data, url: newUrl, label: newUrl },\n//       }));\n//       if (selectedNode.type === \"Select Dataset\") {\n//         if (!number1) {\n//           setNumber1(newUrl);\n//         } else {\n//           setNumber2(newUrl);\n//         }\n//       }\n//     },\n//     [selectedNode, number1]\n//   );\n\n//   const handleSubmit = useCallback(() => {\n//     if (selectedNode) {\n//       setNodes((currentNodes) =>\n//         currentNodes.map((node) =>\n//           node.id === selectedNode.id\n//             ? {\n//                 ...node,\n//                 data: {\n//                   ...node.data,\n//                   url: selectedNode.data.url,\n//                   label: selectedNode.data.url,\n//                 },\n//               }\n//             : node\n//         )\n//       );\n//       setSubmittedData(selectedNode.data);\n//       setSelectedNode(null); // Optional: Clear selection after submit\n//     }\n//   }, [selectedNode, setNodes]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         onNodeClick={onNodeClick}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Select Dataset\">Select Dataset</option>\n//           <option value=\"Pre-processing\">Pre-processing</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {submittedData && (\n//         <div\n//           style={{\n//             position: \"absolute\",\n//             right: \"10px\",\n//             top: \"160px\",\n//             zIndex: 1000,\n//             background: \"white\",\n//             padding: \"10px\",\n//             border: \"1px solid #ddd\",\n//           }}\n//         >\n//           <div>\n//             <strong>Submitted URL:</strong> {submittedData.url}\n//           </div>\n//           <div>\n//             <strong>Result:</strong> {result}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\n// #################################################\n// import React, { useCallback, useState } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./CustomNode\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [selectedOption, setSelectedOption] = useState(\"\");\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     const newNode = {\n//       id: String(nextNodeId),\n//       type: \"customNode\",\n//       data: {\n//         label: `${nodeType} Node ${nextNodeId}`,\n//         dropdownValue: \"\",\n//         onDropdownChange: (value) => {\n//           setSelectedNode(String(nextNodeId));\n//           setSelectedOption(value);\n//           setIsPopupOpen(true);\n//         },\n//       },\n//       position: {\n//         x: (Math.random() * window.innerWidth) / 2,\n//         y: (Math.random() * window.innerHeight) / 2,\n//       },\n//     };\n//     setNodes((nds) => nds.concat(newNode));\n//     setNextNodeId(nextNodeId + 1);\n//     setNodeType(\"\");\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = () => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, dropdownValue: selectedOption, hiddenValue: popupValue } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Select Dataset\">Select Dataset</option>\n//           <option value=\"Pre-processing\">Pre-processing</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//       </div>\n//       {isPopupOpen && (\n//         <div className=\"popup\">\n//           <label>Enter Value:</label>\n//           <input\n//             type=\"text\"\n//             value={popupValue}\n//             onChange={(e) => setPopupValue(e.target.value)}\n//           />\n//           <button onClick={handlePopupSubmit}>Submit</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}