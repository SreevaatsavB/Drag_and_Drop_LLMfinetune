{"ast":null,"code":"var _jsxFileName = \"/Users/sreevaatsav/Downloads/UI_green_sync_test2/my-app/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useCallback, useState, useEffect } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./components/CustomNode\";\n// import Popup from \"./components/Popup\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [executionDone, setExecutionDone] = useState(false);\n\n//   const pollNodeStatus = useCallback(() => {\n//     fetch('http://localhost:5000/status')\n//       .then(response => response.json())\n//       .then(statuses => {\n//         setNodes(nds => nds.map(node => {\n//           const status = statuses[node.id];\n//           if (status === 'completed') {\n//             return { ...node, style: { ...node.style, backgroundColor: 'green' } };\n//           }\n//           return node;\n//         }));\n//         const allCompleted = Object.values(statuses).every(status => status === 'completed');\n//         if (allCompleted && Object.keys(statuses).length > 0) {\n//           setExecutionDone(true);\n//         }\n//       })\n//       .catch(error => console.error('Error fetching node statuses:', error));\n//   }, [setNodes]);\n\n//   useEffect(() => {\n//     const interval = setInterval(pollNodeStatus, 1000);\n//     return () => clearInterval(interval);\n//   }, [pollNodeStatus]);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const isValidConnection = (connection) => {\n//     const sourceNode = nodes.find(node => node.id === connection.source);\n//     const targetNode = nodes.find(node => node.id === connection.target);\n//     if (!sourceNode || !targetNode) return false;\n\n//     const sourceType = sourceNode.data.label.split(\" \")[0];\n//     const targetType = targetNode.data.label.split(\" \")[0];\n\n//     if (sourceType === \"Dataset\" && (targetType === \"Preprocess\" || targetType === \"Train\")) {\n//       return true;\n//     }\n//     if (sourceType === \"Preprocess\" && targetType === \"Train\") {\n//       return true;\n//     }\n//     if (sourceType === \"Train\" && targetType === \"Test\") {\n//       return true;\n//     }\n//     if (sourceType === \"Test\" && targetType === \"Deploy\") {\n//       return true;\n//     }\n//     return false;\n//   };\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     let newNode;\n//     const commonCallbacks = {\n//       onDropdownChange: () => {},\n//       onNumberChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onStringChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onFileChange: () => {},\n//     };\n//     switch (nodeType) {\n//       case \"Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             url: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Upload Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             file: \"\",\n//             ...commonCallbacks,\n//             onFileChange: (file) => {\n//               setNodes((nds) =>\n//                 nds.map((node) =>\n//                   node.id === String(nextNodeId)\n//                     ? { ...node, data: { ...node.data, file } }\n//                     : node\n//                 )\n//               );\n//             },\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Preprocess\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             prompt: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Train\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             temperature: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Test\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             input: \"\",\n//             output: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Deploy\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             typeValue: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       default:\n//         break;\n//     }\n\n//     if (newNode) {\n//       setNodes((nds) => nds.concat(newNode));\n//       setNextNodeId(nextNodeId + 1);\n//       setNodeType(\"\");\n//     }\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = (value) => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, cred: value } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   const executeAction = useCallback(() => {\n//     setExecutionDone(false);  // Reset execution done state\n//     fetch('http://localhost:5000/execute', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ nodes, edges }),\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         if (data.status === 'success') {\n//           alert('Flow is valid!');\n//         } else {\n//           alert(`Error: ${data.message}`);\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   }, [nodes, edges]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         isValidConnection={isValidConnection}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Dataset\">Dataset</option>\n//           <option value=\"Upload Dataset\">Upload Dataset</option>\n//           <option value=\"Preprocess\">Preprocess</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {isPopupOpen && (\n//         <Popup value={popupValue} onChange={setPopupValue} onSubmit={handlePopupSubmit} />\n//       )}\n//       {executionDone && (\n//         <div className=\"execution-done-message\">\n//           Execution done!\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState, addEdge } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport CustomNode from \"./components/CustomNode\";\nimport Popup from \"./components/Popup\";\nimport Chatbot from \"./components/Chatbot\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [];\nconst initialEdges = [];\nconst nodeTypes = {\n  customNode: CustomNode\n};\nfunction FlowComponent() {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nextNodeId, setNextNodeId] = useState(3);\n  const [nodeType, setNodeType] = useState(\"\");\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [popupValue, setPopupValue] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isChatbotOpen, setIsChatbotOpen] = useState(false);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatOutput, setChatOutput] = useState(\"\");\n\n  // ... other functions\n\n  const handleChatSubmit = async input => {\n    // Simulate chat response\n    const response = await fetch(\"http://localhost:5000/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        input\n      })\n    }).then(res => res.json());\n    setChatOutput(response.output);\n  };\n  const handleChatApprove = () => {\n    // Handle approval logic\n    setIsChatbotOpen(false);\n  };\n  const handleChatDisapprove = () => {\n    // Handle disapproval logic\n    setIsChatbotOpen(false);\n  };\n  const addNode = useCallback(() => {\n    if (!nodeType) return;\n    let newNode;\n    const commonCallbacks = {\n      onDropdownChange: () => {},\n      onNumberChange: (value, field) => {\n        setNodes(nds => nds.map(node => node.id === String(nextNodeId) ? {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        } : node));\n      },\n      onStringChange: (value, field) => {\n        setNodes(nds => nds.map(node => node.id === String(nextNodeId) ? {\n          ...node,\n          data: {\n            ...node.data,\n            [field]: value\n          }\n        } : node));\n      },\n      onFileChange: () => {}\n    };\n    switch (nodeType) {\n      case \"Dataset\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            url: \"\",\n            cred: \"\",\n            onCredChange: () => {\n              setSelectedNode(String(nextNodeId));\n              setIsPopupOpen(true);\n            },\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Upload Dataset\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            file: \"\",\n            ...commonCallbacks,\n            onFileChange: file => {\n              setNodes(nds => nds.map(node => node.id === String(nextNodeId) ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  file\n                }\n              } : node));\n            }\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Preprocess\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            prompt: \"\",\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Train\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            temperature: \"\",\n            cred: \"\",\n            onCredChange: () => {\n              setSelectedNode(String(nextNodeId));\n              setIsPopupOpen(true);\n            },\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Test\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            onChatOpen: () => {\n              setIsChatbotOpen(true);\n            },\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      case \"Deploy\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            typeValue: \"\",\n            ...commonCallbacks\n          },\n          position: {\n            x: 250,\n            y: 5\n          }\n        };\n        break;\n      default:\n        break;\n    }\n    if (newNode) {\n      setNodes(nds => nds.concat(newNode));\n      setNextNodeId(nextNodeId + 1);\n      setNodeType(\"\");\n    }\n  }, [nodeType, nextNodeId, setNodes]);\n  const handlePopupSubmit = value => {\n    setNodes(nds => nds.map(node => node.id === selectedNode ? {\n      ...node,\n      data: {\n        ...node.data,\n        cred: value\n      }\n    } : node));\n    setIsPopupOpen(false);\n    setPopupValue(\"\");\n  };\n  const executeAction = useCallback(() => {\n    setExecutionDone(false); // Reset execution done state\n    fetch('http://localhost:5000/execute', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        nodes,\n        edges\n      })\n    }).then(response => response.json()).then(data => {\n      if (data.status === 'success') {\n        alert('Flow is valid!');\n      } else {\n        alert(`Error: ${data.message}`);\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, [nodes, edges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      isValidConnection: isValidConnection,\n      nodeTypes: nodeTypes,\n      fitView: true,\n      style: {\n        flexGrow: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        right: \"10px\",\n        top: \"10px\",\n        zIndex: 1000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: nodeType,\n        onChange: e => setNodeType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select Node Type...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Dataset\",\n          children: \"Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Upload Dataset\",\n          children: \"Upload Dataset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Preprocess\",\n          children: \"Preprocess\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Train\",\n          children: \"Train\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Test\",\n          children: \"Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Deploy\",\n          children: \"Deploy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addNode,\n        children: \"Add Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: executeAction,\n        children: \"Execute Action\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(Popup, {\n      value: popupValue,\n      onChange: setPopupValue,\n      onSubmit: handlePopupSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 9\n    }, this), isChatbotOpen && /*#__PURE__*/_jsxDEV(Chatbot, {\n      input: chatInput,\n      output: chatOutput,\n      onInputChange: setChatInput,\n      onSubmit: handleChatSubmit,\n      onApprove: handleChatApprove,\n      onDisapprove: handleChatDisapprove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n}\n_s(FlowComponent, \"lOots//e45/dPkW1IErf9xNGqYY=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = FlowComponent;\nexport default FlowComponent;\nvar _c;\n$RefreshReg$(_c, \"FlowComponent\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","addEdge","CustomNode","Popup","Chatbot","jsxDEV","_jsxDEV","initialNodes","initialEdges","nodeTypes","customNode","FlowComponent","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","nextNodeId","setNextNodeId","nodeType","setNodeType","isPopupOpen","setIsPopupOpen","popupValue","setPopupValue","selectedNode","setSelectedNode","isChatbotOpen","setIsChatbotOpen","chatInput","setChatInput","chatOutput","setChatOutput","handleChatSubmit","input","response","fetch","method","headers","body","JSON","stringify","then","res","json","output","handleChatApprove","handleChatDisapprove","addNode","newNode","commonCallbacks","onDropdownChange","onNumberChange","value","field","nds","map","node","id","String","data","onStringChange","onFileChange","type","label","url","cred","onCredChange","position","x","y","file","prompt","temperature","onChatOpen","typeValue","concat","handlePopupSubmit","executeAction","setExecutionDone","status","alert","message","catch","error","console","style","height","display","flexDirection","children","onConnect","isValidConnection","fitView","flexGrow","fileName","_jsxFileName","lineNumber","columnNumber","color","gap","right","top","zIndex","onChange","e","target","onClick","onSubmit","onInputChange","onApprove","onDisapprove","_c","$RefreshReg$"],"sources":["/Users/sreevaatsav/Downloads/UI_green_sync_test2/my-app/src/App.js"],"sourcesContent":["// import React, { useCallback, useState, useEffect } from \"react\";\n// import ReactFlow, {\n//   MiniMap,\n//   Controls,\n//   Background,\n//   useNodesState,\n//   useEdgesState,\n//   addEdge,\n// } from \"reactflow\";\n// import \"reactflow/dist/style.css\";\n// import CustomNode from \"./components/CustomNode\";\n// import Popup from \"./components/Popup\";\n// import './App.css';\n\n// const initialNodes = [];\n// const initialEdges = [];\n\n// const nodeTypes = {\n//   customNode: CustomNode,\n// };\n\n// function FlowComponent() {\n//   const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n//   const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n//   const [nextNodeId, setNextNodeId] = useState(3);\n//   const [nodeType, setNodeType] = useState(\"\");\n//   const [isPopupOpen, setIsPopupOpen] = useState(false);\n//   const [popupValue, setPopupValue] = useState(\"\");\n//   const [selectedNode, setSelectedNode] = useState(null);\n//   const [executionDone, setExecutionDone] = useState(false);\n\n//   const pollNodeStatus = useCallback(() => {\n//     fetch('http://localhost:5000/status')\n//       .then(response => response.json())\n//       .then(statuses => {\n//         setNodes(nds => nds.map(node => {\n//           const status = statuses[node.id];\n//           if (status === 'completed') {\n//             return { ...node, style: { ...node.style, backgroundColor: 'green' } };\n//           }\n//           return node;\n//         }));\n//         const allCompleted = Object.values(statuses).every(status => status === 'completed');\n//         if (allCompleted && Object.keys(statuses).length > 0) {\n//           setExecutionDone(true);\n//         }\n//       })\n//       .catch(error => console.error('Error fetching node statuses:', error));\n//   }, [setNodes]);\n\n//   useEffect(() => {\n//     const interval = setInterval(pollNodeStatus, 1000);\n//     return () => clearInterval(interval);\n//   }, [pollNodeStatus]);\n\n//   const onConnect = useCallback(\n//     (params) => setEdges((els) => addEdge(params, els)),\n//     [setEdges]\n//   );\n\n//   const isValidConnection = (connection) => {\n//     const sourceNode = nodes.find(node => node.id === connection.source);\n//     const targetNode = nodes.find(node => node.id === connection.target);\n//     if (!sourceNode || !targetNode) return false;\n\n//     const sourceType = sourceNode.data.label.split(\" \")[0];\n//     const targetType = targetNode.data.label.split(\" \")[0];\n\n//     if (sourceType === \"Dataset\" && (targetType === \"Preprocess\" || targetType === \"Train\")) {\n//       return true;\n//     }\n//     if (sourceType === \"Preprocess\" && targetType === \"Train\") {\n//       return true;\n//     }\n//     if (sourceType === \"Train\" && targetType === \"Test\") {\n//       return true;\n//     }\n//     if (sourceType === \"Test\" && targetType === \"Deploy\") {\n//       return true;\n//     }\n//     return false;\n//   };\n\n//   const addNode = useCallback(() => {\n//     if (!nodeType) return;\n//     let newNode;\n//     const commonCallbacks = {\n//       onDropdownChange: () => {},\n//       onNumberChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onStringChange: (value, field) => {\n//         setNodes((nds) =>\n//           nds.map((node) =>\n//             node.id === String(nextNodeId)\n//               ? { ...node, data: { ...node.data, [field]: value } }\n//               : node\n//           )\n//         );\n//       },\n//       onFileChange: () => {},\n//     };\n//     switch (nodeType) {\n//       case \"Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             url: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Upload Dataset\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             file: \"\",\n//             ...commonCallbacks,\n//             onFileChange: (file) => {\n//               setNodes((nds) =>\n//                 nds.map((node) =>\n//                   node.id === String(nextNodeId)\n//                     ? { ...node, data: { ...node.data, file } }\n//                     : node\n//                 )\n//               );\n//             },\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Preprocess\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             prompt: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Train\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             temperature: \"\",\n//             cred: \"\",\n//             onCredChange: () => {\n//               setSelectedNode(String(nextNodeId));\n//               setIsPopupOpen(true);\n//             },\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Test\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             input: \"\",\n//             output: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       case \"Deploy\":\n//         newNode = {\n//           id: String(nextNodeId),\n//           type: \"customNode\",\n//           data: {\n//             label: `${nodeType} Node ${nextNodeId}`,\n//             typeValue: \"\",\n//             ...commonCallbacks,\n//           },\n//           position: { x: 250, y: 5 },\n//         };\n//         break;\n//       default:\n//         break;\n//     }\n\n//     if (newNode) {\n//       setNodes((nds) => nds.concat(newNode));\n//       setNextNodeId(nextNodeId + 1);\n//       setNodeType(\"\");\n//     }\n//   }, [nodeType, nextNodeId, setNodes]);\n\n//   const handlePopupSubmit = (value) => {\n//     setNodes((nds) =>\n//       nds.map((node) =>\n//         node.id === selectedNode\n//           ? { ...node, data: { ...node.data, cred: value } }\n//           : node\n//       )\n//     );\n//     setIsPopupOpen(false);\n//     setPopupValue(\"\");\n//   };\n\n//   const executeAction = useCallback(() => {\n//     setExecutionDone(false);  // Reset execution done state\n//     fetch('http://localhost:5000/execute', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ nodes, edges }),\n//     })\n//       .then(response => response.json())\n//       .then(data => {\n//         if (data.status === 'success') {\n//           alert('Flow is valid!');\n//         } else {\n//           alert(`Error: ${data.message}`);\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   }, [nodes, edges]);\n\n//   return (\n//     <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n//       <ReactFlow\n//         nodes={nodes}\n//         edges={edges}\n//         onNodesChange={onNodesChange}\n//         onEdgesChange={onEdgesChange}\n//         onConnect={onConnect}\n//         isValidConnection={isValidConnection}\n//         nodeTypes={nodeTypes}\n//         fitView\n//         style={{ flexGrow: 1 }}\n//       >\n//         <MiniMap />\n//         <Controls />\n//         <Background color=\"#aaa\" gap={16} />\n//       </ReactFlow>\n//       <div\n//         style={{\n//           position: \"absolute\",\n//           right: \"10px\",\n//           top: \"10px\",\n//           zIndex: 1000,\n//         }}\n//       >\n//         <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n//           <option value=\"\">Select Node Type...</option>\n//           <option value=\"Dataset\">Dataset</option>\n//           <option value=\"Upload Dataset\">Upload Dataset</option>\n//           <option value=\"Preprocess\">Preprocess</option>\n//           <option value=\"Train\">Train</option>\n//           <option value=\"Test\">Test</option>\n//           <option value=\"Deploy\">Deploy</option>\n//         </select>\n//         <button onClick={addNode}>Add Node</button>\n//         <button onClick={executeAction}>Execute Action</button>\n//       </div>\n//       {isPopupOpen && (\n//         <Popup value={popupValue} onChange={setPopupValue} onSubmit={handlePopupSubmit} />\n//       )}\n//       {executionDone && (\n//         <div className=\"execution-done-message\">\n//           Execution done!\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default FlowComponent;\n\n\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport ReactFlow, {\n  MiniMap,\n  Controls,\n  Background,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport CustomNode from \"./components/CustomNode\";\nimport Popup from \"./components/Popup\";\nimport Chatbot from \"./components/Chatbot\";\nimport './App.css';\n\nconst initialNodes = [];\nconst initialEdges = [];\n\nconst nodeTypes = {\n  customNode: CustomNode,\n};\n\nfunction FlowComponent() {\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [nextNodeId, setNextNodeId] = useState(3);\n  const [nodeType, setNodeType] = useState(\"\");\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [popupValue, setPopupValue] = useState(\"\");\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isChatbotOpen, setIsChatbotOpen] = useState(false);\n  const [chatInput, setChatInput] = useState(\"\");\n  const [chatOutput, setChatOutput] = useState(\"\");\n\n  // ... other functions\n\n  const handleChatSubmit = async (input) => {\n    // Simulate chat response\n    const response = await fetch(\"http://localhost:5000/chat\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ input }),\n    }).then((res) => res.json());\n\n    setChatOutput(response.output);\n  };\n\n  const handleChatApprove = () => {\n    // Handle approval logic\n    setIsChatbotOpen(false);\n  };\n\n  const handleChatDisapprove = () => {\n    // Handle disapproval logic\n    setIsChatbotOpen(false);\n  };\n\n  const addNode = useCallback(() => {\n    if (!nodeType) return;\n    let newNode;\n    const commonCallbacks = {\n      onDropdownChange: () => {},\n      onNumberChange: (value, field) => {\n        setNodes((nds) =>\n          nds.map((node) =>\n            node.id === String(nextNodeId)\n              ? { ...node, data: { ...node.data, [field]: value } }\n              : node\n          )\n        );\n      },\n      onStringChange: (value, field) => {\n        setNodes((nds) =>\n          nds.map((node) =>\n            node.id === String(nextNodeId)\n              ? { ...node, data: { ...node.data, [field]: value } }\n              : node\n          )\n        );\n      },\n      onFileChange: () => {},\n    };\n    switch (nodeType) {\n      case \"Dataset\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            url: \"\",\n            cred: \"\",\n            onCredChange: () => {\n              setSelectedNode(String(nextNodeId));\n              setIsPopupOpen(true);\n            },\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Upload Dataset\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            file: \"\",\n            ...commonCallbacks,\n            onFileChange: (file) => {\n              setNodes((nds) =>\n                nds.map((node) =>\n                  node.id === String(nextNodeId)\n                    ? { ...node, data: { ...node.data, file } }\n                    : node\n                )\n              );\n            },\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Preprocess\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            prompt: \"\",\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Train\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            temperature: \"\",\n            cred: \"\",\n            onCredChange: () => {\n              setSelectedNode(String(nextNodeId));\n              setIsPopupOpen(true);\n            },\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Test\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            onChatOpen: () => {\n              setIsChatbotOpen(true);\n            },\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      case \"Deploy\":\n        newNode = {\n          id: String(nextNodeId),\n          type: \"customNode\",\n          data: {\n            label: `${nodeType} Node ${nextNodeId}`,\n            typeValue: \"\",\n            ...commonCallbacks,\n          },\n          position: { x: 250, y: 5 },\n        };\n        break;\n      default:\n        break;\n    }\n\n    if (newNode) {\n      setNodes((nds) => nds.concat(newNode));\n      setNextNodeId(nextNodeId + 1);\n      setNodeType(\"\");\n    }\n  }, [nodeType, nextNodeId, setNodes]);\n\n  const handlePopupSubmit = (value) => {\n    setNodes((nds) =>\n      nds.map((node) =>\n        node.id === selectedNode\n          ? { ...node, data: { ...node.data, cred: value } }\n          : node\n      )\n    );\n    setIsPopupOpen(false);\n    setPopupValue(\"\");\n  };\n\n  const executeAction = useCallback(() => {\n    setExecutionDone(false);  // Reset execution done state\n    fetch('http://localhost:5000/execute', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ nodes, edges }),\n    })\n      .then(response => response.json())\n      .then(data => {\n        if (data.status === 'success') {\n          alert('Flow is valid!');\n        } else {\n          alert(`Error: ${data.message}`);\n        }\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  }, [nodes, edges]);\n\n  return (\n    <div style={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n      <ReactFlow\n        nodes={nodes}\n        edges={edges}\n        onNodesChange={onNodesChange}\n        onEdgesChange={onEdgesChange}\n        onConnect={onConnect}\n        isValidConnection={isValidConnection}\n        nodeTypes={nodeTypes}\n        fitView\n        style={{ flexGrow: 1 }}\n      >\n        <MiniMap />\n        <Controls />\n        <Background color=\"#aaa\" gap={16} />\n      </ReactFlow>\n      <div\n        style={{\n          position: \"absolute\",\n          right: \"10px\",\n          top: \"10px\",\n          zIndex: 1000,\n        }}\n      >\n        <select value={nodeType} onChange={(e) => setNodeType(e.target.value)}>\n          <option value=\"\">Select Node Type...</option>\n          <option value=\"Dataset\">Dataset</option>\n          <option value=\"Upload Dataset\">Upload Dataset</option>\n          <option value=\"Preprocess\">Preprocess</option>\n          <option value=\"Train\">Train</option>\n          <option value=\"Test\">Test</option>\n          <option value=\"Deploy\">Deploy</option>\n        </select>\n        <button onClick={addNode}>Add Node</button>\n        <button onClick={executeAction}>Execute Action</button>\n      </div>\n      {isPopupOpen && (\n        <Popup value={popupValue} onChange={setPopupValue} onSubmit={handlePopupSubmit} />\n      )}\n      {isChatbotOpen && (\n        <Chatbot\n          input={chatInput}\n          output={chatOutput}\n          onInputChange={setChatInput}\n          onSubmit={handleChatSubmit}\n          onApprove={handleChatApprove}\n          onDisapprove={handleChatDisapprove}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default FlowComponent;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}